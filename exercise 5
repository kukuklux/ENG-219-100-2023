{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN24F7XpvtSaDZW4CbGB27h",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kukuklux/ENG-219-100-2023/blob/main/exercise%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Do not change: Initial menu for your restaurant\n",
        "menu = ['stewed meat with onions', 'bean soup', 'risotto with trout and shrimp',\n",
        "       'fish soup with cream and onion', 'gyro']\n",
        "\n",
        "# TODO: remove 'bean soup', and add 'roasted beet salad' to the end of the menu\n",
        "menu.remove('bean soup')  # This removes 'bean soup' from the list\n",
        "menu.append('roasted beet salad')  # This adds 'roasted beet salad' to the end of the list\n",
        "\n",
        "# Do not change: Check your answer\n",
        "q1.check()\n"
      ],
      "metadata": {
        "id": "ryHewYjcKTzG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Do not change: Number of customers each day for the last month\n",
        "num_customers = [137, 147, 135, 128, 170, 174, 165, 146, 126, 159,\n",
        "                 141, 148, 132, 147, 168, 153, 170, 161, 148, 152,\n",
        "                 141, 151, 131, 149, 164, 163, 143, 143, 166, 171]\n",
        "\n",
        "# TODO: Fill in values for the variables below\n",
        "avg_first_seven = sum(num_customers[:7]) / 7  # Average of the first 7 days\n",
        "avg_last_seven = sum(num_customers[-7:]) / 7  # Average of the last 7 days\n",
        "max_month = max(num_customers)  # Maximum value in the entire list\n",
        "min_month = min(num_customers)  # Minimum value in the entire list\n",
        "\n",
        "# Do not change: Check your answer\n",
        "q2.check()\n"
      ],
      "metadata": {
        "id": "6wPLPPTZKhoJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Do not change: Define two Python strings\n",
        "alphabet = \"A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z\"\n",
        "address = \"Mr. H. Potter,The cupboard under the Stairs,4 Privet Drive,Little Whinging,Surrey\"\n",
        "\n",
        "# TODO: Convert strings into Python lists\n",
        "letters = alphabet.split('.')  # Split the alphabet string by the period\n",
        "formatted_address = address.split(',')  # Split the address string by the comma\n",
        "\n",
        "# Do not change: Check your answer\n",
        "q3.check()\n"
      ],
      "metadata": {
        "id": "ApdQ_FeoKsLE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def percentage_liked(ratings):\n",
        "    list_liked = [i >= 4 for i in ratings]\n",
        "    # Calculate the percentage of people who liked the movie\n",
        "    percentage_liked = sum(list_liked) / len(ratings)\n",
        "    return percentage_liked\n",
        "\n",
        "# Do not change: should return 0.5\n",
        "print(percentage_liked([1, 2, 3, 4, 5, 4, 5, 1]))\n",
        "\n",
        "# Do not change: Check your answer\n",
        "q4.check()\n"
      ],
      "metadata": {
        "id": "rzNXihcsK2JR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "growth = (num_users[-1] - num_users[-yrs_ago-1]) / num_users[-yrs_ago-1]\n",
        "\n",
        "def percentage_growth(num_users, yrs_ago):\n",
        "    growth = (num_users[-1] - num_users[-yrs_ago-1]) / num_users[-yrs_ago-1]\n",
        "    return growth\n",
        "\n",
        "# Do not change: Variable for calculating some test examples\n",
        "num_users_test = [920344, 1043553, 1204334, 1458996, 1503323, 1593432, 1623463, 1843064, 1930992, 2001078]\n",
        "\n",
        "# Do not change: Should return .036\n",
        "print(percentage_growth(num_users_test, 1))\n",
        "\n",
        "# Do not change: Should return 0.66\n",
        "print(percentage_growth(num_users_test, 7))\n",
        "\n",
        "# Do not change: Check your answer\n",
        "q5.check()\n"
      ],
      "metadata": {
        "id": "lalCz1K5LAKl"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}